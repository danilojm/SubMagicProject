generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("SUPABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  plan          UserPlan  @default(FREE)
  usageCount    Int       @default(0)
  usageLimit    Int       @default(10)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  jobs     Job[]
  projects Project[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Job {
  id                String           @id @default(cuid())
  userId            String
  title             String
  description       String?
  inputType         InputType
  inputSource       String           // YouTube URL, file path, or other URL
  originalFileName  String?
  fileSize          Int?
  duration          Int?             // in seconds
  status            JobStatus        @default(QUEUED)
  progress          Int              @default(0)
  sourceLanguage    String?          // auto-detected or specified
  targetLanguages   String[]         // array of language codes
  transcriptionText String?          @db.Text
  errorMessage      String?          @db.Text
  statusMessage     String?          @db.Text 
  processingStarted DateTime?
  processingEnded   DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  subtitles    Subtitle[]
  project      Project?       @relation(fields: [projectId], references: [id])
  projectId    String?
  jobSettings  JobSettings?
  analytics    JobAnalytics?

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model JobSettings {
  id                    String  @id @default(cuid())
  jobId                 String  @unique
  whisperModel          String  @default("base") // tiny, base, small, medium, large
  enableSpeakerDetection Boolean @default(false)
  customVocabulary      String? @db.Text
  translationProvider   String  @default("google") // google, deepl, azure
  enableAutoSync        Boolean @default(true)
  qualityThreshold      Float   @default(0.8)
  maxSegmentLength      Int     @default(30) // seconds
  
  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model JobAnalytics {
  id                  String   @id @default(cuid())
  jobId               String   @unique
  transcriptionTime   Int?     // milliseconds
  translationTime     Int?     // milliseconds
  totalProcessingTime Int?     // milliseconds
  qualityScore        Float?   // 0-1
  wordCount           Int?
  segmentCount        Int?
  errorCount          Int      @default(0)
  retryCount          Int      @default(0)
  
  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Subtitle {
  id           String         @id @default(cuid())
  jobId        String
  language     String
  format       SubtitleFormat @default(SRT)
  content      String         @db.Text
  filePath     String?
  fileSize     Int?
  downloadCount Int           @default(0)
  isEdited     Boolean        @default(false)
  editHistory  Json?          // Store edit history as JSON
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([language])
}

model Project {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs Job[]

  @@index([userId])
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  name      String
  key       String   @unique
  isActive  Boolean  @default(true)
  lastUsed  DateTime?
  usageCount Int     @default(0)
  createdAt DateTime @default(now())
  expiresAt DateTime?

  @@index([userId])
  @@index([key])
}

model SystemSettings {
  id    String @id @default(cuid())
  key   String @unique
  value String @db.Text
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum UserPlan {
  FREE
  PRO
  ENTERPRISE
}

enum InputType {
  YOUTUBE_URL
  VIDEO_FILE
  AUDIO_FILE
  OTHER_URL
}

enum JobStatus {
  QUEUED
  PROCESSING
  DOWNLOADING
  TRANSCRIBING
  TRANSLATING
  GENERATING
  COMPLETED
  FAILED
  CANCELLED
}

enum SubtitleFormat {
  SRT
  VTT
  ASS
  SSA
  TTML
}
